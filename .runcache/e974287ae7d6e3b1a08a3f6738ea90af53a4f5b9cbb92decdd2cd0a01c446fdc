{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"function sha256 (message) {\n  if (!Array.isArray(message)) throw new Error(`Invalid bytes: ${message}`)\n\n  // Based off https://github.com/emn178/js-sha256/blob/master/src/sha256.js\n\n  const EXTRA = [-2147483648, 8388608, 32768, 128]\n  const SHIFT = [24, 16, 8, 0]\n  const K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ]\n\n  const blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  let h0 = 0x6a09e667\n  let h1 = 0xbb67ae85\n  let h2 = 0x3c6ef372\n  let h3 = 0xa54ff53a\n  let h4 = 0x510e527f\n  let h5 = 0x9b05688c\n  let h6 = 0x1f83d9ab\n  let h7 = 0x5be0cd19\n\n  let block = 0\n  let start = 0\n  let bytes = 0\n  let hBytes = 0\n  let first = true\n  let hashed = false\n  let lastByteIndex = 0\n\n  update()\n  finalize()\n  return digest()\n\n  function update () {\n    let i\n    let index = 0\n    const length = message.length\n\n    while (index < length) {\n      if (hashed) {\n        hashed = false\n        blocks[0] = block\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n                blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n                blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n                blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0\n      }\n\n      for (i = start; index < length && i < 64; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3]\n      }\n\n      lastByteIndex = i\n      bytes += i - start\n      if (i >= 64) {\n        block = blocks[16]\n        start = i - 64\n        hash()\n        hashed = true\n      } else {\n        start = i\n      }\n    }\n\n    if (bytes > 4294967295) {\n      hBytes += bytes / 4294967296 << 0\n      bytes = bytes % 4294967296\n    }\n  }\n\n  function finalize () {\n    blocks[16] = block\n    blocks[lastByteIndex >> 2] |= EXTRA[lastByteIndex & 3]\n    block = blocks[16]\n    if (lastByteIndex >= 56) {\n      if (!hashed) {\n        hash()\n      }\n      blocks[0] = block\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n            blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n            blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0\n    }\n    blocks[14] = hBytes << 3 | bytes >>> 29\n    blocks[15] = bytes << 3\n    hash()\n  }\n\n  function hash () {\n    let a = h0\n    let b = h1\n    let c = h2\n    let d = h3\n    let e = h4\n    let f = h5\n    let g = h6\n    let h = h7\n    let j\n    let s0\n    let s1\n    let maj\n    let t1\n    let t2\n    let ch\n    let ab\n    let da\n    let cd\n    let bc\n\n    for (j = 16; j < 64; ++j) {\n      t1 = blocks[j - 15]\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3)\n      t1 = blocks[j - 2]\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10)\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0\n    }\n\n    bc = b & c\n    for (j = 0; j < 64; j += 4) {\n      if (first) {\n        ab = 704751109\n        t1 = blocks[0] - 210244248\n        h = t1 - 1521486534 << 0\n        d = t1 + 143694565 << 0\n        first = false\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10))\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7))\n        ab = a & b\n        maj = ab ^ (a & c) ^ bc\n        ch = (e & f) ^ (~e & g)\n        t1 = h + s1 + ch + K[j] + blocks[j]\n        t2 = s0 + maj\n        h = d + t1 << 0\n        d = t1 + t2 << 0\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10))\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7))\n      da = d & a\n      maj = da ^ (d & b) ^ ab\n      ch = (h & e) ^ (~h & f)\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1]\n      t2 = s0 + maj\n      g = c + t1 << 0\n      c = t1 + t2 << 0\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10))\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7))\n      cd = c & d\n      maj = cd ^ (c & a) ^ da\n      ch = (g & h) ^ (~g & e)\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2]\n      t2 = s0 + maj\n      f = b + t1 << 0\n      b = t1 + t2 << 0\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10))\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7))\n      bc = b & c\n      maj = bc ^ (b & d) ^ cd\n      ch = (f & g) ^ (~f & h)\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3]\n      t2 = s0 + maj\n      e = a + t1 << 0\n      a = t1 + t2 << 0\n    }\n\n    h0 = h0 + a << 0\n    h1 = h1 + b << 0\n    h2 = h2 + c << 0\n    h3 = h3 + d << 0\n    h4 = h4 + e << 0\n    h5 = h5 + f << 0\n    h6 = h6 + g << 0\n    h7 = h7 + h << 0\n  }\n\n  function digest () {\n    return [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF,\n      (h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF\n    ]\n  }\n}","version":"04"}