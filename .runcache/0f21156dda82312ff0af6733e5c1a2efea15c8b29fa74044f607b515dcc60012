{"kind":"code","props":{"deps":{},"location":"_o1","nonce":1,"origin":"_o1","owner":"1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx","satoshis":0},"src":"class Base58 {\n  static decode (s) {\n    // Based on https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\n    if (typeof s !== 'string') throw new Error(`Cannot decode: ${s}`)\n    const A = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n    const d = [] // the array for storing the stream of decoded bytes\n    const b = [] // the result byte array that will be returned\n    let j // the iterator variable for the byte array (d)\n    let c // the carry amount variable that is used to overflow from the current byte to the next byte\n    let n // a temporary placeholder variable for the current byte\n    for (let i = 0; i < s.length; i++) {\n      j = 0 // reset the byte iterator\n      c = A.indexOf(s[i]) // set the initial carry amount equal to the current base58 digit\n      if (c < 0) throw new Error(`Invalid base58 character: ${s}\\n\\nDetails: i=${i}, c=${s[i]}`)\n      if (!(c || b.length ^ i)) b.push(0) // prepend the result array with a zero if the base58 digit is zero and non-zero characters haven't been seen yet (to ensure correct decode length)\n      while (j in d || c) { // start looping through the bytes until there are no more bytes and no carry amount\n        n = d[j] // set the placeholder for the current byte\n        n = n ? n * 58 + c : c // shift the current byte 58 units and add the carry amount (or just add the carry amount if this is a new byte)\n        c = n >> 8 // find the new carry amount (1-byte shift of current byte value)\n        d[j] = n % 256 // reset the current byte to the remainder (the carry amount will pass on the overflow)\n        j++ // iterate to the next byte\n      }\n    }\n    while (j--) { b.push(d[j]) } // since the byte array is backwards, loop through it in reverse order, and append\n    if (b.length < 5) throw new Error(`Base58 string too short: ${s}`)\n    // We assume the checksum and version are correct\n    return b.slice(1, b.length - 4)\n  }\n}","version":"04"}